version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    
      # Add parameter here
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople4058-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl  https://kvdb.io/6YVb82cT8ru7BMuKPGtVpt/migration_<< parameters.workflow_id >>) 
            echo $SUCCESS
            if [ $SUCCESS == 1 ]; 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi
  create-dotenv:
    description: Create .env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
              npm install
              npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

                
  test-backend:
    docker:
    # Docker image here
     - image: circleci/node:13.8.0
    steps:
    # Checkout code from git
     - checkout
     # Restore from cache
     - restore_cache:
          keys: [frontend-build]
    # Your job code here
     - run: 
          command: |
              cd frontend
              npm install
              npm run test
      
            
  scan-frontend:
      # Docker image here
    docker: 
      - image: circleci/node:13.8.0
    steps:
    # Checkout code from git
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run: 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  scan-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run: 
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # Install tar and gzip
      - run: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Fetch add append the public IP address of the EC2 instance to inventory.txt file
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   



  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["61:f7:35:db:05:5c:8b:84:85:43:dd:e1:98:b1:dd:5d"] 
      
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
              apk add --update tar gzip ansible
              pip3 install awscli
      - attach_workspace:
          at: ~/ 
      - run:
          name: Configure server
          command: |
                cd .circleci/ansible
                ansible-playbook -i  inventory.txt configure-server.yml
               
        
      - destroy-environment:
          workflow_id:
                ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade
            sudo apt install awscli
      - checkout
      - create-dotenv
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          #running and saving migration output
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Sending migrations status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/AdrjT8A3HVRTt8c4LZ6HzM/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update
            sudo apt upgrade
            sudo apt install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                     --filter "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople4058-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id:
                ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
       - image: python:3.7-alpine3.11 
    steps:
        - checkout
        - add_ssh_keys:
                # You can get this ID in the section where you registered the SSH Key
                fingerprints: ["61:f7:35:db:05:5c:8b:84:85:43:dd:e1:98:b1:dd:5d"] 
        - attach_workspace:
            at: ~/
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
        - create-dotenv
        - run:
            name: Install dependencies
            command: |
              # your code here
              apk add --update --no-cache openssh ansible tar gzip nodejs npm
              pip3 install awscli 
              rm -rf /var/cache/apk/*
        - run:
            name: Deploy backend
            command: |
              # your code here
              cd backend
              npm i
              npm run build
              cd ..
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
              ls
              mv artifact.tar.gz .circleci/ansible/
              cd .circleci/ansible/
              echo "Contents  of the inventory.txt file is -------"
              cat ~/inventory.txt
              ansible-playbook -i ~/inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
        - destroy-environment:
            workflow_id:
                  ${CIRCLE_WORKFLOW_ID:0:7} 

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]